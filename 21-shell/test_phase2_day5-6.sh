#!/bin/bash

echo "=== Phase 2 Day 5-6: Page Fault Handling Test ==="
echo "Testing Page Fault Handler Implementation..."
echo

# Test 1: Build system
echo "Test 1: Build System"
make clean > /dev/null 2>&1
if make > /dev/null 2>&1; then
    echo "✓ Build successful"
else
    echo "✗ Build failed"
    exit 1
fi
echo

# Test 2: Check page fault handler exists
echo "Test 2: Page Fault Handler Implementation"
if grep -q "page_fault_handler" cpu/isr.c; then
    echo "✓ Page fault handler found in cpu/isr.c"
else
    echo "✗ Page fault handler not found"
fi

if grep -q "register_interrupt_handler(14, page_fault_handler)" cpu/isr.c; then
    echo "✓ Page fault handler registered for interrupt 14"
else
    echo "✗ Page fault handler not registered"
fi
echo

# Test 3: Check page fault stub exists
echo "Test 3: Page Fault Stub"
if grep -q "isr_stub" cpu/isr_stubs_simple.asm && grep -q "%rep 32" cpu/isr_stubs_simple.asm; then
    echo "✓ Page fault stub (ISR 14) generated by macro"
else
    echo "✗ Page fault stub generation not found"
fi
echo

# Test 4: Check memory access checking
echo "Test 4: Memory Access Checking"
if grep -q "check_memory_access" kernel/memory.c; then
    echo "✓ Memory access checking function exists"
else
    echo "✗ Memory access checking not found"
fi

if grep -q "trigger_page_fault" kernel/memory.c; then
    echo "✓ Page fault trigger function exists"
else
    echo "✗ Page fault trigger not found"
fi
echo

# Test 5: Check process termination
echo "Test 5: Process Termination"
if grep -q "terminate_process" kernel/process.c; then
    echo "✓ Process termination function exists"
else
    echo "✗ Process termination not found"
fi

if grep -q "free_memory_region" kernel/process.c; then
    echo "✓ Memory cleanup in process termination"
else
    echo "✗ Memory cleanup not found"
fi
echo

# Test 6: Check header declarations
echo "Test 6: Header Declarations"
if grep -q "void terminate_process" kernel/process.h; then
    echo "✓ terminate_process declared in header"
else
    echo "✗ terminate_process not declared"
fi

if grep -q "void trigger_page_fault" kernel/memory.h; then
    echo "✓ trigger_page_fault declared in header"
else
    echo "✗ trigger_page_fault not declared"
fi
echo

# Test 7: Check CR2 register access
echo "Test 7: CR2 Register Access"
if grep -q "mov %%cr2" cpu/isr.c; then
    echo "✓ CR2 register access for fault address"
else
    echo "✗ CR2 register access not found"
fi
echo

# Test 8: Check fault address handling
echo "Test 8: Fault Address Handling"
if grep -q "fault_address" cpu/isr.c; then
    echo "✓ Fault address extraction"
else
    echo "✗ Fault address handling not found"
fi
echo

# Test 9: Check memory region validation
echo "Test 9: Memory Region Validation"
if grep -q "find_memory_region" cpu/isr.c; then
    echo "✓ Memory region lookup in page fault handler"
else
    echo "✗ Memory region validation not found"
fi
echo

# Test 10: Check process isolation
echo "Test 10: Process Isolation"
if grep -q "process_id != current_pid" cpu/isr.c; then
    echo "✓ Process isolation check in page fault handler"
else
    echo "✗ Process isolation not found"
fi
echo

# Test 11: Check system halt on fault
echo "Test 11: System Halt on Fault"
if grep -q "System halted due to page fault" cpu/isr.c; then
    echo "✓ System halt on page fault"
else
    echo "✗ System halt not found"
fi
echo

# Test 12: Check object file symbols
echo "Test 12: Object File Symbols"
if nm cpu/isr.o | grep -q "page_fault_handler"; then
    echo "✓ page_fault_handler symbol in object file"
else
    echo "✗ page_fault_handler symbol not found"
fi
echo

# Test 13: Check integration with memory system
echo "Test 13: Memory System Integration"
if grep -q "memory_regions" cpu/isr.c; then
    echo "✓ Memory regions integration"
else
    echo "✗ Memory regions integration not found"
fi
echo

# Test 14: Check error messages
echo "Test 14: Error Messages"
if grep -q "Memory access violation" cpu/isr.c; then
    echo "✓ Memory access violation messages"
else
    echo "✗ Memory access violation messages not found"
fi
echo

# Test 15: Check process management integration
echo "Test 15: Process Management Integration"
if grep -q "get_current_pid" cpu/isr.c; then
    echo "✓ Process management integration"
else
    echo "✗ Process management integration not found"
fi
echo

echo "=== Phase 2 Day 5-6 Test Results ==="
echo "Page Fault Handling Implementation Complete!"
echo "Ready for Phase 2 Day 7-9: Enhanced Memory Protection" 